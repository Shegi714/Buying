import os
import time
import requests
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import json
from datetime import datetime, timedelta

# üß™ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (GitHub Secrets)
SOURCE_SHEET_ID = os.environ.get("SOURCE_SHEET_ID")
TARGET_SHEET_ID = os.environ.get("TARGET_SHEET_ID")

# ‚öôÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_json = os.environ.get("GOOGLE_CREDS_JSON")
if not creds_json:
    raise ValueError("GOOGLE_CREDS_JSON not set or empty!")

creds_dict = json.loads(creds_json)
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

# üìë –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –∫–∞–±–∏–Ω–µ—Ç–æ–≤
source_sheet = client.open_by_key(SOURCE_SHEET_ID).sheet1
rows = source_sheet.get_all_values()[1:]
data = [{"token": row[0], "cabinet": row[1]} for row in rows if len(row) >= 2 and row[0].strip()]

# üì° –§—É–Ω–∫—Ü–∏—è –≤—ã–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥–∞–∂ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –¥–Ω–µ–π
def fetch_sales(token, days=14):
    url = "https://statistics-api.wildberries.ru/api/v1/supplier/sales"
    headers = {
        "accept": "application/json",
        "Authorization": token,  # ‚ö†Ô∏è –ø—Ä–æ—Å—Ç–æ —Ç–æ–∫–µ–Ω, –±–µ–∑ Bearer
        "User-Agent": "Mozilla/5.0"
    }

    date_from = (datetime.now() - timedelta(days=days)).strftime("%Y-%m-%dT00:00:00")
    all_sales = []
    next_date_from = date_from

    while True:
        print(f"üì° –ó–∞–ø—Ä–æ—Å –ø—Ä–æ–¥–∞–∂ —Å {next_date_from} ...")
        params = {"dateFrom": next_date_from}
        response = requests.get(url, headers=headers, params=params, timeout=60)

        if response.status_code == 401:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ (401 Unauthorized).")
            break
        if response.status_code != 200:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
            break

        sales = response.json()
        if not sales:
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –≤—Å–µ –ø—Ä–æ–¥–∞–∂–∏ —Å–æ–±—Ä–∞–Ω—ã.")
            break

        all_sales.extend(sales)
        print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ–¥–∞–∂: {len(sales)}, –≤—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ: {len(all_sales)}")

        # –ì–æ—Ç–æ–≤–∏–º –¥–∞—Ç—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        next_date_from = sales[-1]["lastChangeDate"]

        # –õ–∏–º–∏—Ç 1 –∑–∞–ø—Ä–æ—Å/–º–∏–Ω
        print("‚è≥ –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥...")
        time.sleep(60)

    return all_sales


# üìä –ó–∞–ø–∏—Å—å –ø—Ä–æ–¥–∞–∂ –≤ Google Sheets
def write_sales_to_sheet(sheet_obj, cabinet_name, sales):
    try:
        # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ—á–∏—â–∞–µ–º –ª–∏—Å—Ç
        try:
            worksheet = sheet_obj.worksheet(cabinet_name)
            worksheet.clear()
        except gspread.exceptions.WorksheetNotFound:
            worksheet = sheet_obj.add_worksheet(title=cabinet_name, rows="1000", cols="25")

        if not sales:
            worksheet.update([["–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"]])
            print(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã—Ö –¥–ª—è '{cabinet_name}' –Ω–µ—Ç.")
            return

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ç–æ–º –ø–æ—Ä—è–¥–∫–µ, –∫–∞–∫ –æ–Ω–∏ –ø—Ä–∏—à–ª–∏
        headers = list(sales[0].keys())
        rows = [headers]

        for sale in sales:
            row = [
                clean_barcode(sale.get(h, "")) if h == "barcode" else sale.get(h, "")
                for h in headers
            ]
            rows.append(row)

        worksheet.update(rows)
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(sales)} –ø—Ä–æ–¥–∞–∂ –≤ –ª–∏—Å—Ç '{cabinet_name}'")

    except Exception as e:
        print(f"üõë –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—Å—Ç '{cabinet_name}': {e}")


# üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    target_sheet = client.open_by_key(TARGET_SHEET_ID)

    for entry in data:
        cabinet = entry["cabinet"]
        token = entry["token"]
        print(f"\nüîÑ –†–∞–±–æ—Ç–∞–µ–º —Å –∫–∞–±–∏–Ω–µ—Ç–æ–º: {cabinet}")

        sales = fetch_sales(token, days=14)
        write_sales_to_sheet(target_sheet, cabinet, sales)


if __name__ == "__main__":
    main()
